{"uid":"78ded07a0d8dae98","name":"Successfully create a tourist and retrieve it with wrong id","fullName":"tests.api_test.GetTouristEndpointTests#test_get_tourist_by_wrongid","historyId":"15d6a57d21f22b26b3ff1f8dc1263531","time":{"start":1686649130653,"stop":1686649131259,"duration":606},"description":"Test successfully creates a tourist but retrieves tourist by wrong id","descriptionHtml":"<p>Test successfully creates a tourist but retrieves tourist by wrong id</p>\n","status":"failed","statusMessage":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <api_test.GetTouristEndpointTests testMethod=test_get_tourist_by_wrongid>\n\n    @title(\"Successfully create a tourist and retrieve it with wrong id\")\n    @description(\"Test successfully creates a tourist but retrieves tourist by wrong id\")\n    def test_get_tourist_by_wrongid(self):\n        payload = {\n            \"id\": 19,\n            \"tourist_name\": \"James Bond 007\",\n            \"tourist_email\": \"jb6@test.com\",\n            \"tourist_location\": \"London\",\n            \"createdat\": \"2023-06-12T18:59:56.868Z\"\n        }\n        create_response = requests.post(f\"{BASE_URL}/Tourist\", json=payload)\n>       assert create_response.status_code == 201\nE       assert 400 == 201\nE        +  where 400 = <Response [400]>.status_code\n\ntests/api_test.py:134: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_GetTouristEndpointTests","time":{"start":1686649129426,"stop":1686649129426,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"afterStages":[{"name":"_unittest_setUpClass_fixture_GetTouristEndpointTests::0","time":{"start":1686649131263,"stop":1686649131264,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"api_test"},{"name":"subSuite","value":"GetTouristEndpointTests"},{"name":"host","value":"fv-az442-96"},{"name":"thread","value":"2260-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.api_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"78ded07a0d8dae98.json","parameterValues":[]}