{"uid":"61d8d6548e0784a0","name":"Successfully create and retrieve a specific tourist","fullName":"tests.api_test.GetTouristEndpointTests#test_get_tourist_by_id","historyId":"99143833bc834099b1e8c6b1d5e79a55","time":{"start":1686654366884,"stop":1686654367383,"duration":499},"description":"Test successfully creates a tourist and retrieves created tourist by id","descriptionHtml":"<p>Test successfully creates a tourist and retrieves created tourist by id</p>\n","status":"failed","statusMessage":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <api_test.GetTouristEndpointTests testMethod=test_get_tourist_by_id>\n\n    @title(\"Successfully create and retrieve a specific tourist\")\n    @description(\"Test successfully creates a tourist and retrieves created tourist by id\")\n    def test_get_tourist_by_id(self):\n        payload = {\n            \"id\": 17,\n            \"tourist_name\": \"James Bond\",\n            \"tourist_email\": \"test4564545@test.com\",\n            \"tourist_location\": \"London\",\n            \"createdat\": \"2023-06-12T18:59:56.868Z\"\n        }\n        create_response = requests.post(f\"{BASE_URL}/Tourist\", json=payload)\n>       assert create_response.status_code == 201\nE       assert 400 == 201\nE        +  where 400 = <Response [400]>.status_code\n\ntests/api_test.py:125: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_GetTouristEndpointTests","time":{"start":1686654366883,"stop":1686654366883,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"afterStages":[{"name":"_unittest_setUpClass_fixture_GetTouristEndpointTests::0","time":{"start":1686654368376,"stop":1686654368377,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"api_test"},{"name":"subSuite","value":"GetTouristEndpointTests"},{"name":"host","value":"fv-az470-7"},{"name":"thread","value":"2276-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.api_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":6},"items":[{"uid":"32dfc4e60b5536a7","reportUrl":"https://megi1t.github.io/Final_Project_testing/13//#testresult/32dfc4e60b5536a7","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1686654338072,"stop":1686654338567,"duration":495}},{"uid":"f4893edbe290952c","reportUrl":"https://megi1t.github.io/Final_Project_testing/11//#testresult/f4893edbe290952c","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1686654306380,"stop":1686654306991,"duration":611}},{"uid":"70ee645234810865","reportUrl":"https://megi1t.github.io/Final_Project_testing/10//#testresult/70ee645234810865","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1686649803335,"stop":1686649803951,"duration":616}},{"uid":"f68637dc966182ed","reportUrl":"https://megi1t.github.io/Final_Project_testing/9//#testresult/f68637dc966182ed","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1686649175749,"stop":1686649176234,"duration":485}},{"uid":"e4f5720448fb2282","reportUrl":"https://megi1t.github.io/Final_Project_testing/8//#testresult/e4f5720448fb2282","status":"failed","statusDetails":"AssertionError: assert 400 == 201\n +  where 400 = <Response [400]>.status_code","time":{"start":1686649129426,"stop":1686649130077,"duration":651}}]},"tags":[]},"source":"61d8d6548e0784a0.json","parameterValues":[]}